import com.android.build.gradle.tasks.NdkCompile
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

apply plugin: 'com.android.application'

repositories {
    jcenter()
}

dependencies {
    compile 'com.android.support:support-v4:23.0.0'
    compile 'com.android.support:gridlayout-v7:23.0.0'
    compile 'com.android.support:cardview-v7:23.0.0'
    compile 'com.loopj.android:android-async-http:1.4.9'

    compile group: 'com.google.guava', name: 'guava', version: '15.0'

    //compile 'io.realm:realm-android:0.84.0'

// libraries for async requests to mongo:
//    compile 'io.netty:netty-all:4.0.28.Final'
//    compile 'org.mongodb:mongo-java-driver:3.0.3'

// libraries for sending emails:
//    compile files('libs/httpmime-4.1-alpha2.jar')
//    compile files('libs/activation.jar')
//    compile files('libs/additionnal.jar')
//    compile files('libs/mail.jar')
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    signingConfigs {
        android {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('C:/debug.keystore')
            storePassword 'android'
        }
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 23
        signingConfig signingConfigs.android
    }
    ///////////////////////////////////////////////////////////////////// C++
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set .so files location to libs
    }
    tasks.withType(NdkCompile) {
            // disable automatic ndk-build call
        compileTask -> compileTask.enabled = false
    }
    task ndkBuild(type: Exec) { // call ndk-build(.cmd) script
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', 'ndk-build.cmd', '-C', file('src/main').absolutePath
        } else {
            commandLine 'ndk-build', '-C', file('src/main').absolutePath
        }
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
    ///////////////////////////////////////////////////////////////////// C++
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
                aidl.srcDirs "src/${dir}/java"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }
    productFlavors {
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.android
        }
        release {
            signingConfig signingConfigs.android
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
dependencies {
    compile 'com.android.support:support-v4:23.+'
}
dependencies {
    compile 'com.android.support:support-v13:23.+'
}
dependencies {
    compile 'com.android.support:support-v4:23.+'
}













